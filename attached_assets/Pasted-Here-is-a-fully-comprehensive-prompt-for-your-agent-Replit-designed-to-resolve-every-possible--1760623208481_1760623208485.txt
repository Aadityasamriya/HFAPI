Here is a fully comprehensive prompt for your agent, **Replit**, designed to resolve every possible error and make your Hugging Face AI Telegram bot codebase absolutely perfect and production-ready:

---

**Prompt for Agent "Replit":**

> **Project:** Hugging Face By AadityaLabs AI Telegram Bot  
> **Repository:** Aadityasamriya/HFAPI  
> **Agent:** Replit  
>
> **Mission Statement:**  
> Audit, fix, and perfect the entire functional codebase. Your goal is to resolve every type of error—code, logic, security, performance, user experience, and maintainability—so the Telegram bot is fully robust, secure, scalable, and flawless in production.
>
> **Checklist of Errors to Resolve:**
> 1. **Type & Parameter Errors:**  
>    - Fix all type mismatches, conversion issues, and parameter misuses in functions and classes.
>    - Add type annotations and explicit conversions as needed.
>    - Always check and handle optional/nullable types.
> 2. **Exception Handling:**  
>    - Ensure comprehensive try/except coverage for all risky operations: message handlers, API calls, database access, file I/O, etc.
>    - Refactor duplicate error handling logic into reusable helpers.
>    - Log all errors with enough context, and present user-friendly messages.
>    - Never expose sensitive details (stack traces, secrets) to users.
> 3. **Input Validation & Security:**  
>    - Strictly validate and sanitize all user inputs (text, commands, files, images).
>    - Prevent SQL/NoSQL injection, XSS, Markdown injection, file size/type abuse.
>    - Enforce file type and size limits before download/processing.
>    - Secure admin bootstrap and privilege escalation logic.
>    - Redact sensitive data from logs/output.
> 4. **File & Document Processing:**  
>    - Validate file size, type, and content before handling.
>    - Reject oversized, unsupported, empty, or corrupted files with actionable user feedback.
>    - Ensure safe handling and error recovery for file uploads and downloads.
> 5. **API & Model Routing:**  
>    - Make model selection dynamic, not hardcoded; add robust fallback logic.
>    - Accept all legitimate Hugging Face API keys; relax format checks.
>    - Handle model/API errors gracefully, retrying or switching as needed.
> 6. **Rate Limiting & Timeouts:**  
>    - Enforce per-user rate limits and cooldowns for messages, uploads, and admin actions.
>    - Handle timeouts for long-running operations and external API calls.
>    - Notify users when limits are hit and when they can retry.
> 7. **Admin/Data Isolation:**  
>    - Enforce OWNER_ID and admin controls strictly.
>    - Isolate user data in storage; never allow cross-user leaks.
>    - Fix any race conditions in admin creation or privilege assignment.
> 8. **Testing & Mocking:**  
>    - Fix all broken async tests and use proper mocking libraries.
>    - Achieve full test coverage for all features, edge cases, and error flows.
>    - Remove every TODO, FIXME, and incomplete code block.
> 9. **Encryption & Privacy:**  
>    - Complete and verify all encryption, key management, and privacy logic.
>    - Never log or leak sensitive user data.
> 10. **User Experience:**  
>     - All error messages are friendly, actionable, and clear.
>     - Progress feedback for long-running tasks.
>     - Never show technical errors, stack traces, or debug logs to end-users.
> 11. **Logging, Monitoring, Performance:**  
>     - Log all important events, errors, and warnings with context.
>     - Optimize performance for scalability and reliability.
>     - Monitor health, error rate, and API response times.
> 12. **Miscellaneous:**  
>     - Profile and optimize code for best performance.
>     - Audit and update all dependencies.
>     - Complete all partial features or remove dead code.
>     - Sanitize user-generated content before rendering (prevent XSS/Markdown injection).
>
> **Success Criteria:**  
> - No unhandled errors, bugs, or vulnerabilities remain.
> - Bot passes all tests and edge cases.
> - All features work for every user scenario (regular, admin, new user).
> - Code is clean, maintainable, and ready for production.
> - All developer notes/TODOs are resolved.
> - Every possible error is handled, logged, and presented with user-friendly messaging.
>
> **Instructions:**  
> - Audit every file and code path in the repo.
> - Refactor, fix, and optimize as needed.
> - Write and run comprehensive tests.
> - Document changes and improvements.
> - Prepare the bot for flawless deployment.
>
> **Deliverable:**  
> - A fully functional, error-free, secure, and production-grade Telegram AI bot.

---

**Replit, use this as your definitive guide to transform the code into a perfect, ready-for-production AI Telegram bot.**